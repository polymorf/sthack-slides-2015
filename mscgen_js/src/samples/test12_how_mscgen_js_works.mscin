# how mscgen_js works internally, roughly
msc {
  hscale="0.7";

  you       [linecolor="#008800", textbgcolor="#CCFFCC", arclinecolor="#008800"],
  controler [linecolor="#FF0000", textbgcolor="#FFCCCC", arclinecolor="#FF0000"],
  parser    [label="parser (PEGjs)", linecolor="#0000FF", textbgcolor="#CCCCFF", arclinecolor="#0000FF"],
  renderer  [linecolor="#FF00FF", textbgcolor="#FFCCFF", arclinecolor="#FF00FF"],
  canvg     [linecolor="black", textbgcolor="#DDDDDD", arclinecolor="black"],
  comments  [label=" ", linecolor="transparent"];

  you       =>   controler [label="some text"];
  controler =>   parser    [label="ok?"],
   comments note comments  [label="We use the ultra-cool PEGjs parser", linecolor="black", textbgcolor="#FFFFCC"];
  parser    >>   controler [label="syntax tree"];
  controler =>   renderer  [label="syntax tree"];
  renderer  =>   renderer  [label="render"],
   comments note comments  [label="This is where the complexity takes place.", linecolor="black", textbgcolor="#FFFFCC"];
  renderer  >>   controler [label="vector picture"];
  controler >>   you       [label="vector picture"];
  ---;
  you       =>   controler [label="raster graphics?"];
  controler =>   canvg     [label="vector picture"],
   comments note comments  [label="With canvg rendering svg as raster graphics is one (1) line of code.", linecolor="black", textbgcolor="#FFFFCC"];
  canvg     >>   controler [label="raster picture"];
  controler >>   you       [label="raster picture"];
}
